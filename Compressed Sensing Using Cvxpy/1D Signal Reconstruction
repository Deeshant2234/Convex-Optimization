import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import scipy.fftpack as spfft
import cvxpy as cvx
# Generating input signal by adding two sinusoids
n = 5000
t = np.linspace(0, 1/8, n)
y = np.sin(1394 * np.pi * t)+np.sin(3266 * np.pi * t) 
yt = spfft.dct(y, norm='ortho')

fig, axs = plt.subplots()
axs.set_title("Signal")
axs.plot(t,y,'tab:green')
axs.set_xlabel("Time")
axs.set_ylabel("Amplitude")
plt.show()

fig, axs = plt.subplots()
axs.plot(yt,'tab:red')
axs.set_xlabel("Frequency(Hz)")
axs.set_ylabel("Amplitude")
plt.xlim([0, 500])
plt.show()

# extract small sample of signal
m = 500 # 10% sample
ri = np.random.choice(n, m, replace=False) # random sample of indices
ri.sort() # sorting not strictly necessary, but convenient for plotting
t2 = t[ri]
y2 = y[ri]
fig, axs = plt.subplots()
axs.set_title(" Corrupted Signal")
axs.plot(t2,y2,'tab:orange')
axs.set_xlabel("Time")
axs.set_ylabel("Amplitude")
plt.show()
# create idct matrix operator
A = spfft.idct(np.identity(n), norm='ortho', axis=0)
A = A[ri]

# do L1 optimization
vx = cvx.Variable(n)
objective = cvx.Minimize(cvx.norm(vx, 1))
constraints = [A*vx == y2]
prob = cvx.Problem(objective, constraints)
result = prob.solve(verbose=True)

# reconstruct signal
x = np.array(vx.value)
x = np.squeeze(x)
sig = spfft.idct(x, norm='ortho', axis=0)
fig, axs = plt.subplots()
axs.set_title("Reconstructed Signal")
axs.plot(sig,'tab:green')
axs.set_xlabel("Time")
axs.set_ylabel("Amplitude")
plt.show()

# Finding  Mean Square Error
summation = 0                             #variable to store the summation of differences
n = len(y)                                #finding total number of items in list
for i in range (0,n):                     #looping through each element of the list
  difference = sig[i] - y[i]              #finding the difference between reconstructed and input
  squared_difference = difference**2      #taking square of the differene 
  summation = summation + squared_difference  #taking a sum of all the differences
MSE = summation/n                             #dividing summation by total values to obtain average
print("The Mean Square Error is: " , MSE)
